#!/usr/bin/env python3
# chainplotter.py --- Simple Qt5 application embedding matplotlib canvases
# (C) 2018 John Veitch

# Based on embedding in Qt5 demo
# Copyright (C) 2005 Florent Rougon
#               2006 Darren Dale
#               2015 Jens H Nielsen
#

from __future__ import unicode_literals
import sys
import os
from pathlib import Path
import random
import matplotlib
import numpy as np
# Make sure that we are using QT5
matplotlib.use('Qt5Agg')
from PyQt5 import QtCore, QtWidgets

from numpy import arange, sin, pi
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

progname = os.path.basename(sys.argv[0])
progversion = "0.1"


class MyMplCanvas(FigureCanvas):
    """Ultimately, this is a QWidget (as well as a FigureCanvasAgg, etc.)."""

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)

        self.compute_initial_figure()

        FigureCanvas.__init__(self, fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,
                                   QtWidgets.QSizePolicy.Expanding,
                                   QtWidgets.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)

    def compute_initial_figure(self):
        pass


class ChainPlot(MyMplCanvas):
    """A canvas that updates itself every second with a new plot."""

    def __init__(self, *args, filename=None, param=None, **kwargs, ):
        MyMplCanvas.__init__(self, *args, **kwargs)
        self.filename=filename
        self.param=param
        self.posterior=None
        timer = QtCore.QTimer(self)
        timer.timeout.connect(self.refresh_data)
        timer.start(10000)

    def refresh_data(self):
        self.posterior = np.genfromtxt(self.filename,skip_footer=1,names=True,deletechars="")

    def update_figure(self):
        if self.posterior is None: return
    
        # Build a list of 4 random integers between 0 and 10 (both inclusive)
        self.axes.cla()
        self.axes.plot(self.posterior[self.param].T,',')
        self.axes.set_xlabel('iteration')
        self.axes.set_ylabel(self.param)
        self.axes.set_title(self.filename)
        self.draw()


class ApplicationWindow(QtWidgets.QMainWindow):
    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.infile=None
        self.param=None
        self.names=[]
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        self.setWindowTitle("application main window")

        self.file_menu = QtWidgets.QMenu('&File', self)
        self.file_menu.addAction('&Open', self.fileLoad,
                                 QtCore.Qt.CTRL + QtCore.Qt.Key_O)
        self.file_menu.addAction('&Save Figure',self.figSave,
                                 QtCore.Qt.CTRL + QtCore.Qt.Key_S)
        self.file_menu.addAction('&Quit', self.fileQuit,
                                 QtCore.Qt.CTRL + QtCore.Qt.Key_Q)
        self.menuBar().addMenu(self.file_menu)

        self.help_menu = QtWidgets.QMenu('&Help', self)
        self.menuBar().addSeparator()
        self.menuBar().addMenu(self.help_menu)

        self.help_menu.addAction('&About', self.about)

        self.main_widget = QtWidgets.QWidget(self)

        l = QtWidgets.QVBoxLayout(self.main_widget)
        self.dc = ChainPlot(self.main_widget, width=5, height=4, dpi=100, filename=self.infile, param=self.param)
        l.addWidget(self.dc)
        
        # Box to select parameter
        grp=QtWidgets.QGroupBox('Parameters')
        bl=QtWidgets.QVBoxLayout(grp)
        self.pcombo=QtWidgets.QComboBox(self.main_widget)
        self.pcombo.currentTextChanged.connect(self.set_param)

        bl.addWidget(self.pcombo)
        l.addWidget(grp)
        
        self.main_widget.setFocus()
        self.setCentralWidget(self.main_widget)

        #self.statusBar().showMessage("All hail matplotlib!", 2000)
        
    def fileLoad(self):
        """
        Set the input file
        """
        f, pattern = QtWidgets.QFileDialog(self,'Open File',self.infile).getOpenFileName(self,"Set file to watch")
        if f:
            self.set_infile(f)
    
    def figSave(self):
        f, pattern = QtWidgets.QFileDialog(self,'Save Figure',os.path.dirname(self.infile)).getSaveFileName(self,"Choose file to save")
        if f:
            self.dc.figure.savefig(f)
        self.statusBar().showMessage(f'{f}: file written')

    def fileQuit(self):
        self.close()

    def closeEvent(self, ce):
        self.fileQuit()

    def about(self):
        QtWidgets.QMessageBox.about(self, "About",
                                    """chainplotter
                                    For monitoring MCMC chains
                                    author: J. Veitch <john.veitch@ligo.org>"""
                                )

    def set_infile(self,filename):
        if not os.path.exists(filename):
            self.statusBar().showMessage(f'File not found: {filename}')
        with open(filename) as f:
            self.names=f.readline().split()
            
        self.pcombo.clear()
        #for x in range(self.pcombo.count()):
        #    self.pcombo.removeItem(0)
        for n in self.names:
            self.pcombo.addItem(n)
        self.infile=filename
        self.dc.filename=filename
        self.dc.refresh_data()
        #self.dc.update_figure()
        
    def set_param(self,param):
        self.param=param
        self.dc.param=param
        self.dc.update_figure()


if __name__=='__main__':
    from argparse import ArgumentParser
    parser=ArgumentParser(prog='chainplotter',description='A simple GUI for watching live MCMC chains')
    parser.add_argument('-i','--input',default=None,metavar='FILE',help='input file to plot')
    parser.add_argument('-p','--param',default=None,metavar='PARAMNAME',help='Parameter to plot')
    opts=parser.parse_args(sys.argv[1:])
    
    qApp = QtWidgets.QApplication(sys.argv)

    aw = ApplicationWindow()
    if opts.input: aw.set_infile(opts.input)
    if opts.param: aw.set_param(opts.param)
    aw.setWindowTitle("%s" % progname)
    aw.show()
    sys.exit(qApp.exec_())
    #qApp.exec_()
